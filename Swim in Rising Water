#This is taken from LeetCode daily challenge for 6/20/2021
#This is a program that finds the fastest time to swim to a point which is defined by traveling through an array where the time is denoted by the number at the given point.
#This program attempts to travel through the array until it either finds the destination (the bottom-right hand corner) or cannot.
#This program uses binary search algorithm in order to speed up the fastest time possible.

#These are test cases.
#grid = [[26,99,80,1,89,86,54,90,47,87],[9,59,61,49,14,55,77,3,83,79],[42,22,15,5,95,38,74,12,92,71],[58,40,64,62,24,85,30,6,96,52],[10,70,57,19,44,27,98,16,25,65],[13,0,76,32,29,45,28,69,53,41],[18,8,21,67,46,36,56,50,51,72],[39,78,48,63,68,91,34,4,11,31],[97,23,60,17,66,37,43,33,84,35],[75,88,82,20,7,73,2,94,93,81]]
grid = [[31,28,33,0,8,57,86,99,23,98],[25,90,20,73,34,65,29,9,42,46],[17,84,10,4,40,5,41,21,71,79],[13,70,69,81,63,93,77,1,94,53],[38,87,61,50,92,2,15,95,82,68],[44,72,88,47,27,91,37,48,83,16],[3,30,96,66,7,58,76,54,19,64],[85,45,60,11,51,26,6,22,74,32],[43,12,62,59,89,52,36,97,49,78],[75,24,14,67,56,35,55,39,80,18]]
grid1 = [[0,2],[1,3]]
import copy

#This function will iterate through the array trying to find any path that reaches the bottom-right hand corner.
def findPath(curRow, curCol, number):
    if curRow == gridSize - 1 and curCol == gridSize - 1 and number >= grid[curRow][curCol]:  #If we are at the bottom right-hand corner, we return True
        return True
    elif tempGrid[curRow][curCol] == -2:  #Here we are trying to access a part of the grid which has no solution, so we can ignore it.
        return False
    elif grid[curRow][curCol] <= number and tempGrid[curRow][curCol] != -1: #The -1 denotes that we have already been here and don't need to go here again.
        tempGrid[curRow][curCol] = -1
        if curRow > 0 and findPath(curRow - 1, curCol, number): #Each one of the following functions will try to go to different array parts to find a solution
            return True
        if curCol + 1 < gridSize and findPath(curRow, curCol + 1, number):
            return True
        if curRow + 1 < gridSize and findPath(curRow + 1, curCol, number):
            return True            
        if curCol > 0 and findPath(curRow, curCol - 1, number):
            return True
        tempGrid[curRow][curCol] = -2
        return False
    else:
        return False


gridSize = len(grid)
maxSize = max(map(max, grid)) #This is the maximum amount that we can need to finish the grid.
l = grid[gridSize - 1][gridSize - 1]  #Since this is the destination, it also represents the smallest number that can be used to solve the problem.
r = maxSize
lastFound = maxSize

#From here we do our binary search algorithm, trying at different sizes in order to find the lowest possible size to the solution.
while l <= r:
    mid = (l + r) // 2
    tempGrid = [[0 for i in range(gridSize)] for j in range(gridSize)]
    if findPath(0,0,mid):
        lastFound = mid
        r = mid - 1
    else:
        l = mid + 1

#Finally, this program prints the lowest size possible based on what we discovered above.
print(lastFound)
